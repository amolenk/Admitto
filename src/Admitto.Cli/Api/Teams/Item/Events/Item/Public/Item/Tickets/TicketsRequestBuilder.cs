// <auto-generated/>
#pragma warning disable CS0618
using Amolenk.Admitto.Cli.Api.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Amolenk.Admitto.Cli.Api.Teams.Item.Events.Item.Public.Item.Tickets
{
    /// <summary>
    /// Builds and executes requests for operations under \teams\{teamSlug}\events\{eventSlug}\public\{publicId}\tickets
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class TicketsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::Amolenk.Admitto.Cli.Api.Teams.Item.Events.Item.Public.Item.Tickets.TicketsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TicketsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/teams/{teamSlug}/events/{eventSlug}/public/{publicId}/tickets?publicId={publicId}&signature={signature}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Amolenk.Admitto.Cli.Api.Teams.Item.Events.Item.Public.Item.Tickets.TicketsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TicketsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/teams/{teamSlug}/events/{eventSlug}/public/{publicId}/tickets?publicId={publicId}&signature={signature}", rawUrl)
        {
        }
        /// <returns>A <see cref="global::Amolenk.Admitto.Cli.Api.Models.GetTicketsResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Amolenk.Admitto.Cli.Api.Models.HttpValidationProblemDetails">When receiving a 400 status code</exception>
        /// <exception cref="global::Amolenk.Admitto.Cli.Api.Models.ProblemDetails">When receiving a 401 status code</exception>
        /// <exception cref="global::Amolenk.Admitto.Cli.Api.Models.ProblemDetails">When receiving a 403 status code</exception>
        /// <exception cref="global::Amolenk.Admitto.Cli.Api.Models.ProblemDetails">When receiving a 409 status code</exception>
        /// <exception cref="global::Amolenk.Admitto.Cli.Api.Models.ProblemDetails">When receiving a 500 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Amolenk.Admitto.Cli.Api.Models.GetTicketsResponse?> GetAsync(Action<RequestConfiguration<global::Amolenk.Admitto.Cli.Api.Teams.Item.Events.Item.Public.Item.Tickets.TicketsRequestBuilder.TicketsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Amolenk.Admitto.Cli.Api.Models.GetTicketsResponse> GetAsync(Action<RequestConfiguration<global::Amolenk.Admitto.Cli.Api.Teams.Item.Events.Item.Public.Item.Tickets.TicketsRequestBuilder.TicketsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Amolenk.Admitto.Cli.Api.Models.HttpValidationProblemDetails.CreateFromDiscriminatorValue },
                { "401", global::Amolenk.Admitto.Cli.Api.Models.ProblemDetails.CreateFromDiscriminatorValue },
                { "403", global::Amolenk.Admitto.Cli.Api.Models.ProblemDetails.CreateFromDiscriminatorValue },
                { "409", global::Amolenk.Admitto.Cli.Api.Models.ProblemDetails.CreateFromDiscriminatorValue },
                { "500", global::Amolenk.Admitto.Cli.Api.Models.ProblemDetails.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Amolenk.Admitto.Cli.Api.Models.GetTicketsResponse>(requestInfo, global::Amolenk.Admitto.Cli.Api.Models.GetTicketsResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <returns>A <see cref="Stream"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Amolenk.Admitto.Cli.Api.Models.HttpValidationProblemDetails">When receiving a 400 status code</exception>
        /// <exception cref="global::Amolenk.Admitto.Cli.Api.Models.ProblemDetails">When receiving a 401 status code</exception>
        /// <exception cref="global::Amolenk.Admitto.Cli.Api.Models.ProblemDetails">When receiving a 403 status code</exception>
        /// <exception cref="global::Amolenk.Admitto.Cli.Api.Models.ProblemDetails">When receiving a 404 status code</exception>
        /// <exception cref="global::Amolenk.Admitto.Cli.Api.Models.ProblemDetails">When receiving a 409 status code</exception>
        /// <exception cref="global::Amolenk.Admitto.Cli.Api.Models.ProblemDetails">When receiving a 500 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<Stream?> PutAsync(global::Amolenk.Admitto.Cli.Api.Models.ChangeTicketsRequest body, Action<RequestConfiguration<global::Amolenk.Admitto.Cli.Api.Teams.Item.Events.Item.Public.Item.Tickets.TicketsRequestBuilder.TicketsRequestBuilderPutQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<Stream> PutAsync(global::Amolenk.Admitto.Cli.Api.Models.ChangeTicketsRequest body, Action<RequestConfiguration<global::Amolenk.Admitto.Cli.Api.Teams.Item.Events.Item.Public.Item.Tickets.TicketsRequestBuilder.TicketsRequestBuilderPutQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPutRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Amolenk.Admitto.Cli.Api.Models.HttpValidationProblemDetails.CreateFromDiscriminatorValue },
                { "401", global::Amolenk.Admitto.Cli.Api.Models.ProblemDetails.CreateFromDiscriminatorValue },
                { "403", global::Amolenk.Admitto.Cli.Api.Models.ProblemDetails.CreateFromDiscriminatorValue },
                { "404", global::Amolenk.Admitto.Cli.Api.Models.ProblemDetails.CreateFromDiscriminatorValue },
                { "409", global::Amolenk.Admitto.Cli.Api.Models.ProblemDetails.CreateFromDiscriminatorValue },
                { "500", global::Amolenk.Admitto.Cli.Api.Models.ProblemDetails.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendPrimitiveAsync<Stream>(requestInfo, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Amolenk.Admitto.Cli.Api.Teams.Item.Events.Item.Public.Item.Tickets.TicketsRequestBuilder.TicketsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Amolenk.Admitto.Cli.Api.Teams.Item.Events.Item.Public.Item.Tickets.TicketsRequestBuilder.TicketsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, "{+baseurl}/teams/{teamSlug}/events/{eventSlug}/public/{publicId}/tickets?signature={signature}", PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPutRequestInformation(global::Amolenk.Admitto.Cli.Api.Models.ChangeTicketsRequest body, Action<RequestConfiguration<global::Amolenk.Admitto.Cli.Api.Teams.Item.Events.Item.Public.Item.Tickets.TicketsRequestBuilder.TicketsRequestBuilderPutQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPutRequestInformation(global::Amolenk.Admitto.Cli.Api.Models.ChangeTicketsRequest body, Action<RequestConfiguration<global::Amolenk.Admitto.Cli.Api.Teams.Item.Events.Item.Public.Item.Tickets.TicketsRequestBuilder.TicketsRequestBuilderPutQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.PUT, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/problem+json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Amolenk.Admitto.Cli.Api.Teams.Item.Events.Item.Public.Item.Tickets.TicketsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Amolenk.Admitto.Cli.Api.Teams.Item.Events.Item.Public.Item.Tickets.TicketsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Amolenk.Admitto.Cli.Api.Teams.Item.Events.Item.Public.Item.Tickets.TicketsRequestBuilder(rawUrl, RequestAdapter);
        }
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        #pragma warning disable CS1591
        public partial class TicketsRequestBuilderGetQueryParameters 
        #pragma warning restore CS1591
        {
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("signature")]
            public string? Signature { get; set; }
#nullable restore
#else
            [QueryParameter("signature")]
            public string Signature { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class TicketsRequestBuilderGetRequestConfiguration : RequestConfiguration<global::Amolenk.Admitto.Cli.Api.Teams.Item.Events.Item.Public.Item.Tickets.TicketsRequestBuilder.TicketsRequestBuilderGetQueryParameters>
        {
        }
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        #pragma warning disable CS1591
        public partial class TicketsRequestBuilderPutQueryParameters 
        #pragma warning restore CS1591
        {
            [QueryParameter("publicId")]
            public Guid? PublicId { get; set; }
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("signature")]
            public string? Signature { get; set; }
#nullable restore
#else
            [QueryParameter("signature")]
            public string Signature { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class TicketsRequestBuilderPutRequestConfiguration : RequestConfiguration<global::Amolenk.Admitto.Cli.Api.Teams.Item.Events.Item.Public.Item.Tickets.TicketsRequestBuilder.TicketsRequestBuilderPutQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
