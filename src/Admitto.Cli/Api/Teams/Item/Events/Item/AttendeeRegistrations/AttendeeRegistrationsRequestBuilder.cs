// <auto-generated/>
#pragma warning disable CS0618
using Amolenk.Admitto.Cli.Api.Models;
using Amolenk.Admitto.Cli.Api.Teams.Item.Events.Item.AttendeeRegistrations.Invite;
using Amolenk.Admitto.Cli.Api.Teams.Item.Events.Item.AttendeeRegistrations.Item;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Amolenk.Admitto.Cli.Api.Teams.Item.Events.Item.AttendeeRegistrations
{
    /// <summary>
    /// Builds and executes requests for operations under \teams\{teamSlug}\events\{eventSlug}\attendee-registrations
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class AttendeeRegistrationsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The invite property</summary>
        public global::Amolenk.Admitto.Cli.Api.Teams.Item.Events.Item.AttendeeRegistrations.Invite.InviteRequestBuilder Invite
        {
            get => new global::Amolenk.Admitto.Cli.Api.Teams.Item.Events.Item.AttendeeRegistrations.Invite.InviteRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the Amolenk.Admitto.Cli.Api.teams.item.events.item.attendeeRegistrations.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        /// <returns>A <see cref="global::Amolenk.Admitto.Cli.Api.Teams.Item.Events.Item.AttendeeRegistrations.Item.WithRegistrationItemRequestBuilder"/></returns>
        public global::Amolenk.Admitto.Cli.Api.Teams.Item.Events.Item.AttendeeRegistrations.Item.WithRegistrationItemRequestBuilder this[Guid position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("registrationId", position);
                return new global::Amolenk.Admitto.Cli.Api.Teams.Item.Events.Item.AttendeeRegistrations.Item.WithRegistrationItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>Gets an item from the Amolenk.Admitto.Cli.Api.teams.item.events.item.attendeeRegistrations.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        /// <returns>A <see cref="global::Amolenk.Admitto.Cli.Api.Teams.Item.Events.Item.AttendeeRegistrations.Item.WithRegistrationItemRequestBuilder"/></returns>
        [Obsolete("This indexer is deprecated and will be removed in the next major version. Use the one with the typed parameter instead.")]
        public global::Amolenk.Admitto.Cli.Api.Teams.Item.Events.Item.AttendeeRegistrations.Item.WithRegistrationItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                if (!string.IsNullOrWhiteSpace(position)) urlTplParams.Add("registrationId", position);
                return new global::Amolenk.Admitto.Cli.Api.Teams.Item.Events.Item.AttendeeRegistrations.Item.WithRegistrationItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Amolenk.Admitto.Cli.Api.Teams.Item.Events.Item.AttendeeRegistrations.AttendeeRegistrationsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public AttendeeRegistrationsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/teams/{teamSlug}/events/{eventSlug}/attendee-registrations", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Amolenk.Admitto.Cli.Api.Teams.Item.Events.Item.AttendeeRegistrations.AttendeeRegistrationsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public AttendeeRegistrationsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/teams/{teamSlug}/events/{eventSlug}/attendee-registrations", rawUrl)
        {
        }
        /// <returns>A <see cref="global::Amolenk.Admitto.Cli.Api.Models.GetRegistrationsResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Amolenk.Admitto.Cli.Api.Models.HttpValidationProblemDetails">When receiving a 400 status code</exception>
        /// <exception cref="global::Amolenk.Admitto.Cli.Api.Models.ProblemDetails">When receiving a 401 status code</exception>
        /// <exception cref="global::Amolenk.Admitto.Cli.Api.Models.ProblemDetails">When receiving a 403 status code</exception>
        /// <exception cref="global::Amolenk.Admitto.Cli.Api.Models.ProblemDetails">When receiving a 409 status code</exception>
        /// <exception cref="global::Amolenk.Admitto.Cli.Api.Models.ProblemDetails">When receiving a 500 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Amolenk.Admitto.Cli.Api.Models.GetRegistrationsResponse?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Amolenk.Admitto.Cli.Api.Models.GetRegistrationsResponse> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Amolenk.Admitto.Cli.Api.Models.HttpValidationProblemDetails.CreateFromDiscriminatorValue },
                { "401", global::Amolenk.Admitto.Cli.Api.Models.ProblemDetails.CreateFromDiscriminatorValue },
                { "403", global::Amolenk.Admitto.Cli.Api.Models.ProblemDetails.CreateFromDiscriminatorValue },
                { "409", global::Amolenk.Admitto.Cli.Api.Models.ProblemDetails.CreateFromDiscriminatorValue },
                { "500", global::Amolenk.Admitto.Cli.Api.Models.ProblemDetails.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Amolenk.Admitto.Cli.Api.Models.GetRegistrationsResponse>(requestInfo, global::Amolenk.Admitto.Cli.Api.Models.GetRegistrationsResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <returns>A <see cref="global::Amolenk.Admitto.Cli.Api.Models.RegisterAttendeeResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Amolenk.Admitto.Cli.Api.Models.HttpValidationProblemDetails">When receiving a 400 status code</exception>
        /// <exception cref="global::Amolenk.Admitto.Cli.Api.Models.ProblemDetails">When receiving a 401 status code</exception>
        /// <exception cref="global::Amolenk.Admitto.Cli.Api.Models.ProblemDetails">When receiving a 403 status code</exception>
        /// <exception cref="global::Amolenk.Admitto.Cli.Api.Models.ProblemDetails">When receiving a 409 status code</exception>
        /// <exception cref="global::Amolenk.Admitto.Cli.Api.Models.ProblemDetails">When receiving a 500 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Amolenk.Admitto.Cli.Api.Models.RegisterAttendeeResponse?> PostAsync(global::Amolenk.Admitto.Cli.Api.Models.RegisterAttendeeRequest body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Amolenk.Admitto.Cli.Api.Models.RegisterAttendeeResponse> PostAsync(global::Amolenk.Admitto.Cli.Api.Models.RegisterAttendeeRequest body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Amolenk.Admitto.Cli.Api.Models.HttpValidationProblemDetails.CreateFromDiscriminatorValue },
                { "401", global::Amolenk.Admitto.Cli.Api.Models.ProblemDetails.CreateFromDiscriminatorValue },
                { "403", global::Amolenk.Admitto.Cli.Api.Models.ProblemDetails.CreateFromDiscriminatorValue },
                { "409", global::Amolenk.Admitto.Cli.Api.Models.ProblemDetails.CreateFromDiscriminatorValue },
                { "500", global::Amolenk.Admitto.Cli.Api.Models.ProblemDetails.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Amolenk.Admitto.Cli.Api.Models.RegisterAttendeeResponse>(requestInfo, global::Amolenk.Admitto.Cli.Api.Models.RegisterAttendeeResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::Amolenk.Admitto.Cli.Api.Models.RegisterAttendeeRequest body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::Amolenk.Admitto.Cli.Api.Models.RegisterAttendeeRequest body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Amolenk.Admitto.Cli.Api.Teams.Item.Events.Item.AttendeeRegistrations.AttendeeRegistrationsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Amolenk.Admitto.Cli.Api.Teams.Item.Events.Item.AttendeeRegistrations.AttendeeRegistrationsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Amolenk.Admitto.Cli.Api.Teams.Item.Events.Item.AttendeeRegistrations.AttendeeRegistrationsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class AttendeeRegistrationsRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class AttendeeRegistrationsRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
