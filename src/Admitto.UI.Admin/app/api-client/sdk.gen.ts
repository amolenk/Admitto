// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { PostRegistrationsData, PostRegistrationsResponse, PostRegistrationsError, CreateTeamData, CreateTeamResponse2, CreateTeamError, PostTeamsByTeamIdMembersData, PostTeamsByTeamIdMembersError, GetTeamsData, GetTeamsResponse2, PostTeamsByTeamIdEventsData, PostTeamsByTeamIdEventsResponse, PostTeamsByTeamIdEventsError, GetTeamsByTeamIdEventsActiveData, GetTeamsByTeamIdEventsActiveResponse, GetTeamsByTeamIdEventsActiveError, GetTeamsByTeamIdEventsByTicketedEventIdData, GetTeamsByTeamIdEventsByTicketedEventIdResponse, GetTeamsByTeamIdEventsByTicketedEventIdError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const postRegistrations = <ThrowOnError extends boolean = false>(options: Options<PostRegistrationsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostRegistrationsResponse, PostRegistrationsError, ThrowOnError>({
        url: '/registrations',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const createTeam = <ThrowOnError extends boolean = false>(options: Options<CreateTeamData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateTeamResponse2, CreateTeamError, ThrowOnError>({
        url: '/teams',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const postTeamsByTeamIdMembers = <ThrowOnError extends boolean = false>(options: Options<PostTeamsByTeamIdMembersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, PostTeamsByTeamIdMembersError, ThrowOnError>({
        url: '/teams/{teamId}/members',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getTeams = <ThrowOnError extends boolean = false>(options?: Options<GetTeamsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTeamsResponse2, unknown, ThrowOnError>({
        url: '/teams/teams',
        ...options
    });
};

export const postTeamsByTeamIdEvents = <ThrowOnError extends boolean = false>(options: Options<PostTeamsByTeamIdEventsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostTeamsByTeamIdEventsResponse, PostTeamsByTeamIdEventsError, ThrowOnError>({
        url: '/teams/{teamId}/events',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getTeamsByTeamIdEventsActive = <ThrowOnError extends boolean = false>(options: Options<GetTeamsByTeamIdEventsActiveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTeamsByTeamIdEventsActiveResponse, GetTeamsByTeamIdEventsActiveError, ThrowOnError>({
        url: '/teams/{teamId}/events/active',
        ...options
    });
};

export const getTeamsByTeamIdEventsByTicketedEventId = <ThrowOnError extends boolean = false>(options: Options<GetTeamsByTeamIdEventsByTicketedEventIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTeamsByTeamIdEventsByTicketedEventIdResponse, GetTeamsByTeamIdEventsByTicketedEventIdError, ThrowOnError>({
        url: '/teams/{teamId}/events/{ticketedEventId}',
        ...options
    });
};