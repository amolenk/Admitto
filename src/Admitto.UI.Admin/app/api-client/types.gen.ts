// This file is auto-generated by @hey-api/openapi-ts

export type AddTeamMemberRequest = {
    organizingTeamId: string;
    email: string;
    role: UserRole;
};

export type CreateTeamRequest = {
    name: string;
};

export type CreateTeamResponse = {
    id: string;
};

export type CreateTicketedEventRequest = {
    name: string;
    startDateTime: string;
    endDateTime: string;
    registrationStartDateTime: string;
    registrationEndDateTime: string;
    ticketTypes: Array<TicketTypeDto>;
};

export type CreateTicketedEventResponse = {
    id: string;
};

export type GetActiveTicketedEventsResponse = {
    ticketedEvents: Array<TicketedEventDto>;
};

export type GetTeamsResponse = {
    teams: Array<TeamDto>;
};

export type GetTicketedEventResponse = {
    id: string;
    name: string;
    startDateTime: string;
    endDateTime: string;
    registrationStartDateTime: string;
    registrationEndDateTime: string;
    ticketTypes: Array<TicketTypeDto2>;
};

export type HttpValidationProblemDetails = {
    type?: string | null;
    title?: string | null;
    status?: number | null;
    detail?: string | null;
    instance?: string | null;
    errors?: {
        [key: string]: Array<string>;
    };
};

export type RegisterAttendeeRequest = {
    email: string;
    firstName: string;
    lastName: string;
    organizationName: string;
    ticketTypes: Array<string>;
};

export type RegisterAttendeeResponse = {
    id: string;
};

export type TeamDto = {
    id: string;
    name: string;
};

export type TicketedEventDto = {
    id: string;
    name: string;
};

export type TicketTypeDto = {
    name: string;
    slotName: string;
    maxCapacity: number;
};

export type TicketTypeDto2 = {
    name: string;
    slotName: string;
    maxCapacity: number;
    remainingCapacity: number;
};

export type UserRole = 'GlobalAdmin' | 'TeamAdmin' | 'Organiser';

export type PostRegistrationsData = {
    body: RegisterAttendeeRequest;
    path?: never;
    query: {
        teamId: string;
        ticketedEventId: string;
    };
    url: '/registrations';
};

export type PostRegistrationsErrors = {
    /**
     * Bad Request
     */
    400: string;
};

export type PostRegistrationsError = PostRegistrationsErrors[keyof PostRegistrationsErrors];

export type PostRegistrationsResponses = {
    /**
     * Created
     */
    201: RegisterAttendeeResponse;
};

export type PostRegistrationsResponse = PostRegistrationsResponses[keyof PostRegistrationsResponses];

export type CreateTeamData = {
    body: CreateTeamRequest;
    path?: never;
    query?: never;
    url: '/teams';
};

export type CreateTeamErrors = {
    /**
     * Bad Request
     */
    400: HttpValidationProblemDetails;
    /**
     * Conflict
     */
    409: HttpValidationProblemDetails;
};

export type CreateTeamError = CreateTeamErrors[keyof CreateTeamErrors];

export type CreateTeamResponses = {
    /**
     * Created
     */
    201: CreateTeamResponse;
};

export type CreateTeamResponse2 = CreateTeamResponses[keyof CreateTeamResponses];

export type PostTeamsByTeamIdMembersData = {
    body: AddTeamMemberRequest;
    path: {
        teamId: string;
    };
    query?: never;
    url: '/teams/{teamId}/members';
};

export type PostTeamsByTeamIdMembersErrors = {
    /**
     * Bad Request
     */
    400: string;
};

export type PostTeamsByTeamIdMembersError = PostTeamsByTeamIdMembersErrors[keyof PostTeamsByTeamIdMembersErrors];

export type PostTeamsByTeamIdMembersResponses = {
    /**
     * Created
     */
    201: unknown;
};

export type GetTeamsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/teams/teams';
};

export type GetTeamsResponses = {
    /**
     * OK
     */
    200: GetTeamsResponse;
};

export type GetTeamsResponse2 = GetTeamsResponses[keyof GetTeamsResponses];

export type PostTeamsByTeamIdEventsData = {
    body: CreateTicketedEventRequest;
    path: {
        teamId: string;
    };
    query?: never;
    url: '/teams/{teamId}/events';
};

export type PostTeamsByTeamIdEventsErrors = {
    /**
     * Bad Request
     */
    400: string;
};

export type PostTeamsByTeamIdEventsError = PostTeamsByTeamIdEventsErrors[keyof PostTeamsByTeamIdEventsErrors];

export type PostTeamsByTeamIdEventsResponses = {
    /**
     * Created
     */
    201: CreateTicketedEventResponse;
};

export type PostTeamsByTeamIdEventsResponse = PostTeamsByTeamIdEventsResponses[keyof PostTeamsByTeamIdEventsResponses];

export type GetTeamsByTeamIdEventsActiveData = {
    body?: never;
    path: {
        teamId: string;
    };
    query?: never;
    url: '/teams/{teamId}/events/active';
};

export type GetTeamsByTeamIdEventsActiveErrors = {
    /**
     * Bad Request
     */
    400: string;
};

export type GetTeamsByTeamIdEventsActiveError = GetTeamsByTeamIdEventsActiveErrors[keyof GetTeamsByTeamIdEventsActiveErrors];

export type GetTeamsByTeamIdEventsActiveResponses = {
    /**
     * OK
     */
    200: GetActiveTicketedEventsResponse;
};

export type GetTeamsByTeamIdEventsActiveResponse = GetTeamsByTeamIdEventsActiveResponses[keyof GetTeamsByTeamIdEventsActiveResponses];

export type GetTeamsByTeamIdEventsByTicketedEventIdData = {
    body?: never;
    path: {
        teamId: string;
        ticketedEventId: string;
    };
    query?: never;
    url: '/teams/{teamId}/events/{ticketedEventId}';
};

export type GetTeamsByTeamIdEventsByTicketedEventIdErrors = {
    /**
     * Bad Request
     */
    400: string;
    /**
     * Not Found
     */
    404: string;
};

export type GetTeamsByTeamIdEventsByTicketedEventIdError = GetTeamsByTeamIdEventsByTicketedEventIdErrors[keyof GetTeamsByTeamIdEventsByTicketedEventIdErrors];

export type GetTeamsByTeamIdEventsByTicketedEventIdResponses = {
    /**
     * OK
     */
    200: GetTicketedEventResponse;
};

export type GetTeamsByTeamIdEventsByTicketedEventIdResponse = GetTeamsByTeamIdEventsByTicketedEventIdResponses[keyof GetTeamsByTeamIdEventsByTicketedEventIdResponses];

export type ClientOptions = {
    baseUrl: 'http://localhost:5100/' | (string & {});
};