// <auto-generated />
using System;
using Amolenk.Admitto.Application.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Amolenk.Admitto.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618

            modelBuilder.Entity("Amolenk.Admitto.Domain.Entities.TicketType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("MaxCapacity")
                        .HasColumnType("integer")
                        .HasColumnName("max_capacity");

                    b.Property<int>("RemainingCapacity")
                        .HasColumnType("integer")
                        .HasColumnName("remaining_capacity");

                    b.Property<DateTime>("SessionEndDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date_time");

                    b.Property<string>("SessionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<DateTime>("SessionStartDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date_time");

                    b.Property<Guid?>("event_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("ticket_types", (string)null);
                });

            modelBuilder.Entity("Amolenk.Admitto.Domain.Entities.TicketedEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateOnly>("EndDay")
                        .HasColumnType("date")
                        .HasColumnName("end_day");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<DateTime>("SalesEndDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("sales_end_date_time");

                    b.Property<DateTime>("SalesStartDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("sales_start_date_time");

                    b.Property<DateOnly>("StartDay")
                        .HasColumnType("date")
                        .HasColumnName("start_day");

                    b.HasKey("Id");

                    b.ToTable("events", (string)null);
                });

            modelBuilder.Entity("Amolenk.Admitto.Domain.Entities.TicketType", b =>
                {
                    b.HasOne("Amolenk.Admitto.Domain.Entities.TicketedEvent", null)
                        .WithMany("TicketTypes")
                        .HasForeignKey("event_id");
                });

            modelBuilder.Entity("Amolenk.Admitto.Domain.Entities.TicketedEvent", b =>
                {
                    b.Navigation("TicketTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
