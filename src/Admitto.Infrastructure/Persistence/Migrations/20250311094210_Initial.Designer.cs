// <auto-generated />
using System;
using System.Text.Json;
using Amolenk.Admitto.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Amolenk.Admitto.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20250311094210_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Amolenk.Admitto.Application.ReadModel.Views.AttendeeActivityView", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Activity")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("activity");

                    b.Property<Guid>("AttendeeId")
                        .HasColumnType("uuid")
                        .HasColumnName("attendee_id");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.HasKey("Id");

                    b.ToTable("attendee_activities", (string)null);
                });

            modelBuilder.Entity("Amolenk.Admitto.Application.ReadModel.Views.TeamMembersView", b =>
                {
                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("email");

                    b.HasKey("TeamId", "UserId");

                    b.ToTable("team_members", (string)null);
                });

            modelBuilder.Entity("Amolenk.Admitto.Application.UseCases.Auth.AuthorizationCode", b =>
                {
                    b.Property<Guid>("Code")
                        .HasColumnType("uuid")
                        .HasColumnName("code");

                    b.Property<string>("CodeChallenge")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("code_challenge");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Code");

                    b.ToTable("authorization_codes", (string)null);
                });

            modelBuilder.Entity("Amolenk.Admitto.Application.UseCases.Auth.RefreshToken", b =>
                {
                    b.Property<Guid>("Token")
                        .HasColumnType("uuid")
                        .HasColumnName("token");

                    b.HasKey("Token");

                    b.ToTable("refresh_tokens", (string)null);
                });

            modelBuilder.Entity("Amolenk.Admitto.Application.UseCases.Email.EmailMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Priority")
                        .HasColumnType("boolean")
                        .HasColumnName("priority");

                    b.Property<string>("RecipientEmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("recipient_email");

                    b.Property<string>("TemplateId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("template_id");

                    b.Property<Guid?>("TicketedEventId")
                        .HasColumnType("uuid")
                        .HasColumnName("ticketed_event_id");

                    b.HasKey("Id");

                    b.ToTable("email_messages", (string)null);
                });

            modelBuilder.Entity("Amolenk.Admitto.Domain.Entities.AttendeeRegistration", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("last_name");

                    b.Property<string>("OrganizationName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("organization_name");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<Guid>("TicketedEventId")
                        .HasColumnType("uuid")
                        .HasColumnName("event_id");

                    b.HasKey("Id");

                    b.ToTable("attendee_registrations", (string)null);
                });

            modelBuilder.Entity("Amolenk.Admitto.Domain.Entities.OrganizingTeam", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("organizing_teams", (string)null);
                });

            modelBuilder.Entity("Amolenk.Admitto.Domain.Entities.TicketedEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateOnly>("EndDay")
                        .HasColumnType("date")
                        .HasColumnName("end_day");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<DateTime>("SalesEndDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("sales_end_date_time");

                    b.Property<DateTime>("SalesStartDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("sales_start_date_time");

                    b.Property<DateOnly>("StartDay")
                        .HasColumnType("date")
                        .HasColumnName("start_day");

                    b.HasKey("Id");

                    b.ToTable("ticketed_events", (string)null);
                });

            modelBuilder.Entity("Amolenk.Admitto.Infrastructure.Persistence.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<JsonDocument>("Data")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("data");

                    b.Property<bool>("Priority")
                        .HasColumnType("boolean")
                        .HasColumnName("priority");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("outbox", (string)null);
                });

            modelBuilder.Entity("Amolenk.Admitto.Application.UseCases.Email.EmailMessage", b =>
                {
                    b.OwnsMany("Amolenk.Admitto.Application.UseCases.Email.EmailTemplateParameter", "TemplateParameters", b1 =>
                        {
                            b1.Property<Guid>("EmailMessageId")
                                .HasColumnType("uuid");

                            b1.Property<int>("__synthesizedOrdinal")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("EmailMessageId", "__synthesizedOrdinal");

                            b1.ToTable("email_messages");

                            b1.ToJson("template_parameters");

                            b1.WithOwner()
                                .HasForeignKey("EmailMessageId");
                        });

                    b.Navigation("TemplateParameters");
                });

            modelBuilder.Entity("Amolenk.Admitto.Domain.Entities.AttendeeRegistration", b =>
                {
                    b.OwnsOne("Amolenk.Admitto.Domain.ValueObjects.TicketOrder", "TicketOrder", b1 =>
                        {
                            b1.Property<Guid>("AttendeeRegistrationId")
                                .HasColumnType("uuid");

                            b1.HasKey("AttendeeRegistrationId");

                            b1.ToTable("attendee_registrations");

                            b1.ToJson("ticket_order");

                            b1.WithOwner()
                                .HasForeignKey("AttendeeRegistrationId");
                        });

                    b.Navigation("TicketOrder")
                        .IsRequired();
                });

            modelBuilder.Entity("Amolenk.Admitto.Domain.Entities.OrganizingTeam", b =>
                {
                    b.OwnsMany("Amolenk.Admitto.Domain.Entities.User", "Members", b1 =>
                        {
                            b1.Property<Guid>("OrganizingTeamId")
                                .HasColumnType("uuid");

                            b1.Property<int>("__synthesizedOrdinal")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid");

                            b1.Property<int>("Role")
                                .HasColumnType("integer");

                            b1.HasKey("OrganizingTeamId", "__synthesizedOrdinal");

                            b1.ToTable("organizing_teams");

                            b1.ToJson("members");

                            b1.WithOwner()
                                .HasForeignKey("OrganizingTeamId");
                        });

                    b.Navigation("Members");
                });

            modelBuilder.Entity("Amolenk.Admitto.Domain.Entities.TicketedEvent", b =>
                {
                    b.OwnsMany("Amolenk.Admitto.Domain.Entities.TicketType", "TicketTypes", b1 =>
                        {
                            b1.Property<Guid>("TicketedEventId")
                                .HasColumnType("uuid");

                            b1.Property<int>("__synthesizedOrdinal")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<DateTime>("EndDateTime")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid");

                            b1.Property<int>("MaxCapacity")
                                .HasColumnType("integer");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("RemainingCapacity")
                                .HasColumnType("integer");

                            b1.Property<DateTime>("StartDateTime")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("TicketedEventId", "__synthesizedOrdinal");

                            b1.ToTable("ticketed_events");

                            b1.ToJson("ticket_types");

                            b1.WithOwner()
                                .HasForeignKey("TicketedEventId");
                        });

                    b.Navigation("TicketTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
