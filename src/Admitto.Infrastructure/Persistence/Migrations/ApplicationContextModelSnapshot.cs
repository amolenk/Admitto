// <auto-generated />
using System;
using System.Text.Json;
using Amolenk.Admitto.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Amolenk.Admitto.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Amolenk.Admitto.Application.Common.Abstractions.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<JsonDocument>("Data")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("data");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("outbox", (string)null);
                });

            modelBuilder.Entity("Amolenk.Admitto.Application.Common.Email.Sending.EmailLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("EmailType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("email_type");

                    b.Property<Guid>("IdempotencyKey")
                        .HasColumnType("uuid")
                        .HasColumnName("idempotency_key");

                    b.Property<string>("LastError")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("last_error");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("provider");

                    b.Property<string>("ProviderMessageId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("provider_message_id");

                    b.Property<string>("Recipient")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)")
                        .HasColumnName("recipient");

                    b.Property<DateTimeOffset>("SentAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("sent_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("status");

                    b.Property<DateTimeOffset>("StatusUpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("status_updated_at");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("subject");

                    b.Property<Guid>("TicketedEventId")
                        .HasColumnType("uuid")
                        .HasColumnName("event_id");

                    b.HasKey("Id");

                    b.HasIndex("TicketedEventId", "IdempotencyKey", "Recipient")
                        .IsUnique();

                    b.ToTable("email_log", (string)null);
                });

            modelBuilder.Entity("Amolenk.Admitto.Application.Common.Identity.EmailVerificationRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)")
                        .HasColumnName("email");

                    b.Property<DateTimeOffset>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<string>("HashedCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTimeOffset>("RequestedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("requested_at");

                    b.Property<Guid>("TicketedEventId")
                        .HasColumnType("uuid")
                        .HasColumnName("event_id");

                    b.HasKey("Id");

                    b.HasIndex("TicketedEventId");

                    b.ToTable("email_verification_requests", (string)null);
                });

            modelBuilder.Entity("Amolenk.Admitto.Application.Projections.ParticipantActivity.ParticipantActivityView", b =>
                {
                    b.Property<Guid>("TicketedEventId")
                        .HasColumnType("uuid")
                        .HasColumnName("event_id");

                    b.Property<string>("Email")
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)")
                        .HasColumnName("email");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("source_id");

                    b.Property<string>("Activity")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("activity");

                    b.Property<Guid?>("EmailLogId")
                        .HasColumnType("uuid")
                        .HasColumnName("email_log_id");

                    b.Property<DateTimeOffset>("OccuredAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occured_at");

                    b.HasKey("TicketedEventId", "Email", "SourceId");

                    b.HasIndex("TicketedEventId", "Email", "OccuredAt");

                    b.ToTable("participant_activity_view", (string)null);
                });

            modelBuilder.Entity("Amolenk.Admitto.Application.Projections.Participation.ParticipationView", b =>
                {
                    b.Property<Guid>("TicketedEventId")
                        .HasColumnType("uuid")
                        .HasColumnName("event_id");

                    b.Property<Guid>("RegistrationId")
                        .HasColumnType("uuid")
                        .HasColumnName("registration_id");

                    b.Property<string>("AttendeeStatus")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("attendee_status");

                    b.Property<string>("ContributorRole")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("contributor_role");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)")
                        .HasColumnName("email");

                    b.Property<DateTimeOffset>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("TicketedEventId", "RegistrationId");

                    b.ToTable("participation_view", (string)null);
                });

            modelBuilder.Entity("Amolenk.Admitto.Domain.Entities.AttendeeRegistration", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("first_name");

                    b.Property<DateTimeOffset>("LastChangedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_changed_at");

                    b.Property<string>("LastChangedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("last_changed_by");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("last_name");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.Property<Guid>("TicketedEventId")
                        .HasColumnType("uuid")
                        .HasColumnName("event_id");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.ToTable("attendee_registrations", (string)null);
                });

            modelBuilder.Entity("Amolenk.Admitto.Domain.Entities.ContributorRegistration", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("first_name");

                    b.Property<DateTimeOffset>("LastChangedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_changed_at");

                    b.Property<string>("LastChangedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("last_changed_by");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("last_name");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("role");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.Property<Guid>("TicketedEventId")
                        .HasColumnType("uuid")
                        .HasColumnName("event_id");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.ToTable("contributor_registrations", (string)null);
                });

            modelBuilder.Entity("Amolenk.Admitto.Domain.Entities.EmailTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("body");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset>("LastChangedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_changed_at");

                    b.Property<string>("LastChangedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("last_changed_by");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("subject");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.Property<Guid?>("TicketedEventId")
                        .HasColumnType("uuid")
                        .HasColumnName("event_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("TeamId", "TicketedEventId", "Type")
                        .IsUnique();

                    b.ToTable("email_templates", (string)null);
                });

            modelBuilder.Entity("Amolenk.Admitto.Domain.Entities.Job", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset?>("CompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_at");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("error_message");

                    b.Property<JsonDocument>("JobData")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("job_data");

                    b.Property<string>("JobType")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("job_type");

                    b.Property<string>("ProgressMessage")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("progress_message");

                    b.Property<int?>("ProgressPercent")
                        .HasColumnType("integer")
                        .HasColumnName("progress_percent");

                    b.Property<JsonDocument>("ProgressState")
                        .HasColumnType("jsonb")
                        .HasColumnName("progress_state");

                    b.Property<DateTimeOffset?>("StartedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("JobType");

                    b.HasIndex("Status");

                    b.ToTable("jobs", (string)null);
                });

            modelBuilder.Entity("Amolenk.Admitto.Domain.Entities.ScheduledJob", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CronExpression")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("cron_expression");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_enabled");

                    b.Property<JsonDocument>("JobData")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("job_data");

                    b.Property<string>("JobType")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("job_type");

                    b.Property<DateTimeOffset?>("LastRunTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_run_time");

                    b.Property<DateTimeOffset>("NextRunTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("next_run_time");

                    b.HasKey("Id");

                    b.HasIndex("IsEnabled");

                    b.HasIndex("JobType");

                    b.HasIndex("NextRunTime");

                    b.ToTable("scheduled_jobs", (string)null);
                });

            modelBuilder.Entity("Amolenk.Admitto.Domain.Entities.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)")
                        .HasColumnName("email");

                    b.Property<string>("EmailServiceConnectionString")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email_service");

                    b.Property<DateTimeOffset>("LastChangedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_changed_at");

                    b.Property<string>("LastChangedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("last_changed_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("slug");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("teams", (string)null);
                });

            modelBuilder.Entity("Amolenk.Admitto.Domain.Entities.TicketedEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.PrimitiveCollection<string[]>("Attendees")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("attendees");

                    b.Property<string>("BaseUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("base_url");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset>("EndTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_time");

                    b.Property<DateTimeOffset>("LastChangedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_changed_at");

                    b.Property<string>("LastChangedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("last_changed_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<DateTimeOffset>("RegistrationEndTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("registration_end_time");

                    b.Property<DateTimeOffset>("RegistrationStartTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("registration_start_time");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("slug");

                    b.Property<DateTimeOffset>("StartTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_time");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("website");

                    b.HasKey("Id");

                    b.HasIndex("TeamId", "Slug")
                        .IsUnique();

                    b.ToTable("ticketed_events", (string)null);
                });

            modelBuilder.Entity("Amolenk.Admitto.Infrastructure.Messaging.MessageLog", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("HandlerType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("handler_type");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_id");

                    b.Property<string>("MessageType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("message_type");

                    b.Property<DateTimeOffset>("ProcessedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_at");

                    b.HasKey("Id");

                    b.ToTable("message_log", (string)null);
                });

            modelBuilder.Entity("Amolenk.Admitto.Domain.Entities.AttendeeRegistration", b =>
                {
                    b.OwnsMany("Amolenk.Admitto.Domain.ValueObjects.AdditionalDetail", "AdditionalDetails", b1 =>
                        {
                            b1.Property<Guid>("AttendeeRegistrationId")
                                .HasColumnType("uuid");

                            b1.Property<int>("__synthesizedOrdinal")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("AttendeeRegistrationId", "__synthesizedOrdinal");

                            b1.ToTable("attendee_registrations");

                            b1.ToJson("additional_details");

                            b1.WithOwner()
                                .HasForeignKey("AttendeeRegistrationId");
                        });

                    b.OwnsMany("Amolenk.Admitto.Domain.ValueObjects.TicketSelection", "Tickets", b1 =>
                        {
                            b1.Property<Guid>("AttendeeRegistrationId")
                                .HasColumnType("uuid");

                            b1.Property<int>("__synthesizedOrdinal")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<int>("Quantity")
                                .HasColumnType("integer");

                            b1.Property<string>("TicketTypeSlug")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("AttendeeRegistrationId", "__synthesizedOrdinal");

                            b1.ToTable("attendee_registrations");

                            b1.ToJson("tickets");

                            b1.WithOwner()
                                .HasForeignKey("AttendeeRegistrationId");
                        });

                    b.Navigation("AdditionalDetails");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Amolenk.Admitto.Domain.Entities.ContributorRegistration", b =>
                {
                    b.OwnsMany("Amolenk.Admitto.Domain.ValueObjects.AdditionalDetail", "AdditionalDetails", b1 =>
                        {
                            b1.Property<Guid>("ContributorRegistrationId")
                                .HasColumnType("uuid");

                            b1.Property<int>("__synthesizedOrdinal")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("ContributorRegistrationId", "__synthesizedOrdinal");

                            b1.ToTable("contributor_registrations");

                            b1.ToJson("additional_details");

                            b1.WithOwner()
                                .HasForeignKey("ContributorRegistrationId");
                        });

                    b.Navigation("AdditionalDetails");
                });

            modelBuilder.Entity("Amolenk.Admitto.Domain.Entities.Team", b =>
                {
                    b.OwnsMany("Amolenk.Admitto.Domain.Entities.TeamMember", "Members", b1 =>
                        {
                            b1.Property<Guid>("TeamId")
                                .HasColumnType("uuid");

                            b1.Property<int>("__synthesizedOrdinal")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid");

                            b1.Property<int>("Role")
                                .HasColumnType("integer");

                            b1.HasKey("TeamId", "__synthesizedOrdinal");

                            b1.ToTable("teams");

                            b1.ToJson("members");

                            b1.WithOwner()
                                .HasForeignKey("TeamId");
                        });

                    b.Navigation("Members");
                });

            modelBuilder.Entity("Amolenk.Admitto.Domain.Entities.TicketedEvent", b =>
                {
                    b.HasOne("Amolenk.Admitto.Domain.Entities.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsMany("Amolenk.Admitto.Domain.Entities.TicketType", "TicketTypes", b1 =>
                        {
                            b1.Property<Guid>("TicketedEventId")
                                .HasColumnType("uuid");

                            b1.Property<int>("__synthesizedOrdinal")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid");

                            b1.Property<int>("MaxCapacity")
                                .HasColumnType("integer");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("SlotName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Slug")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("UsedCapacity")
                                .HasColumnType("integer");

                            b1.HasKey("TicketedEventId", "__synthesizedOrdinal");

                            b1.ToTable("ticketed_events");

                            b1.ToJson("ticket_types");

                            b1.WithOwner()
                                .HasForeignKey("TicketedEventId");
                        });

                    b.OwnsOne("Amolenk.Admitto.Domain.ValueObjects.TicketedEventPolicies", "ConfiguredPolicies", b1 =>
                        {
                            b1.Property<Guid>("TicketedEventId")
                                .HasColumnType("uuid");

                            b1.HasKey("TicketedEventId");

                            b1.ToTable("ticketed_events");

                            b1.ToJson("policies");

                            b1.WithOwner()
                                .HasForeignKey("TicketedEventId");

                            b1.OwnsOne("Amolenk.Admitto.Domain.ValueObjects.CancellationPolicy", "CancellationPolicy", b2 =>
                                {
                                    b2.Property<Guid>("TicketedEventPoliciesTicketedEventId")
                                        .HasColumnType("uuid");

                                    b2.Property<TimeSpan>("LateCancellationTime")
                                        .HasColumnType("interval");

                                    b2.HasKey("TicketedEventPoliciesTicketedEventId");

                                    b2.ToTable("ticketed_events");

                                    b2.ToJson("CancellationPolicy");

                                    b2.WithOwner()
                                        .HasForeignKey("TicketedEventPoliciesTicketedEventId");
                                });

                            b1.Navigation("CancellationPolicy");
                        });

                    b.Navigation("ConfiguredPolicies")
                        .IsRequired();

                    b.Navigation("TicketTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
