// <auto-generated />
using System;
using System.Text.Json;
using Amolenk.Admitto.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Amolenk.Admitto.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20250919153113_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Amolenk.Admitto.Application.Common.Abstractions.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<JsonDocument>("Data")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("data");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("outbox", (string)null);
                });

            modelBuilder.Entity("Amolenk.Admitto.Application.Common.Email.Sending.EmailLog", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("EmailType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("email_type");

                    b.Property<Guid>("IdempotencyKey")
                        .HasColumnType("uuid")
                        .HasColumnName("idempotency_key");

                    b.Property<string>("LastError")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("last_error");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("provider");

                    b.Property<string>("ProviderMessageId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("provider_message_id");

                    b.Property<string>("Recipient")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)")
                        .HasColumnName("recipient");

                    b.Property<DateTimeOffset>("SentAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("sent_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("status");

                    b.Property<DateTimeOffset>("StatusUpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("status_updated_at");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("subject");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.Property<Guid>("TicketedEventId")
                        .HasColumnType("uuid")
                        .HasColumnName("event_id");

                    b.HasKey("Id");

                    b.HasIndex("TicketedEventId", "IdempotencyKey", "Recipient")
                        .IsUnique();

                    b.ToTable("email_log", (string)null);
                });

            modelBuilder.Entity("Amolenk.Admitto.Application.Common.Identity.EmailVerificationRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)")
                        .HasColumnName("email");

                    b.Property<DateTimeOffset>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<string>("HashedCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTimeOffset>("RequestedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("requested_at");

                    b.Property<Guid>("TicketedEventId")
                        .HasColumnType("uuid")
                        .HasColumnName("event_id");

                    b.HasKey("Id");

                    b.ToTable("email_verification_requests", (string)null);
                });

            modelBuilder.Entity("Amolenk.Admitto.Application.Projections.ParticipantActivity.ParticipantActivityView", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Activity")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("activity");

                    b.Property<Guid?>("EmailLogId")
                        .HasColumnType("uuid")
                        .HasColumnName("email_log_id");

                    b.Property<DateTimeOffset>("OccuredOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occured_on");

                    b.Property<Guid>("ParticipantId")
                        .HasColumnType("uuid")
                        .HasColumnName("participant_id");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("source_id");

                    b.Property<Guid>("TicketedEventId")
                        .HasColumnType("uuid")
                        .HasColumnName("event_id");

                    b.HasKey("Id");

                    b.HasIndex("TicketedEventId", "ParticipantId", "SourceId", "Activity")
                        .IsUnique();

                    b.ToTable("vw_participant_activities", (string)null);
                });

            modelBuilder.Entity("Amolenk.Admitto.Application.Projections.Participation.ParticipationView", b =>
                {
                    b.Property<Guid>("ParticipantId")
                        .HasColumnType("uuid")
                        .HasColumnName("participant_id");

                    b.Property<Guid?>("AttendeeId")
                        .HasColumnType("uuid")
                        .HasColumnName("attendee_id");

                    b.Property<string>("AttendeeStatus")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("attendee_status");

                    b.Property<Guid?>("ContributorId")
                        .HasColumnType("uuid")
                        .HasColumnName("contributor_id");

                    b.Property<string>("ContributorStatus")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("contributor_status");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("first_name");

                    b.Property<DateTimeOffset>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("last_name");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uuid")
                        .HasColumnName("public_id");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.Property<Guid>("TicketedEventId")
                        .HasColumnType("uuid")
                        .HasColumnName("event_id");

                    b.HasKey("ParticipantId");

                    b.HasIndex("TicketedEventId", "PublicId")
                        .IsUnique();

                    b.ToTable("vw_participations", (string)null);
                });

            modelBuilder.Entity("Amolenk.Admitto.Domain.Entities.Attendee", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("first_name");

                    b.Property<DateTimeOffset>("LastChangedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_changed_at");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("last_name");

                    b.Property<Guid>("ParticipantId")
                        .HasColumnType("uuid")
                        .HasColumnName("participant_id");

                    b.Property<string>("RegistrationStatus")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<Guid>("TicketedEventId")
                        .HasColumnType("uuid")
                        .HasColumnName("event_id");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("attendees", (string)null);
                });

            modelBuilder.Entity("Amolenk.Admitto.Domain.Entities.BulkEmailWorkItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("EmailType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("email_type");

                    b.Property<string>("Error")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("error");

                    b.Property<DateTimeOffset>("LastChangedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_changed_at");

                    b.Property<DateTimeOffset?>("LastRunAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_run_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("status");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.Property<Guid>("TicketedEventId")
                        .HasColumnType("uuid")
                        .HasColumnName("event_id");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.ToTable("bulk_email_work_items", (string)null);
                });

            modelBuilder.Entity("Amolenk.Admitto.Domain.Entities.Contributor", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("first_name");

                    b.Property<DateTimeOffset>("LastChangedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_changed_at");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("last_name");

                    b.Property<Guid>("ParticipantId")
                        .HasColumnType("uuid")
                        .HasColumnName("participant_id");

                    b.Property<string[]>("Roles")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("roles");

                    b.Property<Guid>("TicketedEventId")
                        .HasColumnType("uuid")
                        .HasColumnName("event_id");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("TicketedEventId", "Email")
                        .IsUnique();

                    b.ToTable("contributors", (string)null);
                });

            modelBuilder.Entity("Amolenk.Admitto.Domain.Entities.EmailTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("body");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset>("LastChangedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_changed_at");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("subject");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.Property<Guid?>("TicketedEventId")
                        .HasColumnType("uuid")
                        .HasColumnName("event_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("type");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("TeamId", "TicketedEventId", "Type")
                        .IsUnique();

                    b.ToTable("email_templates", (string)null);
                });

            modelBuilder.Entity("Amolenk.Admitto.Domain.Entities.Participant", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)")
                        .HasColumnName("email");

                    b.Property<DateTimeOffset>("LastChangedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_changed_at");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uuid")
                        .HasColumnName("public_id");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.Property<Guid>("TicketedEventId")
                        .HasColumnType("uuid")
                        .HasColumnName("event_id");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("TicketedEventId", "Email")
                        .IsUnique();

                    b.ToTable("participants", (string)null);
                });

            modelBuilder.Entity("Amolenk.Admitto.Domain.Entities.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)")
                        .HasColumnName("email");

                    b.Property<string>("EmailServiceConnectionString")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email_service");

                    b.Property<DateTimeOffset>("LastChangedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_changed_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("slug");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("teams", (string)null);
                });

            modelBuilder.Entity("Amolenk.Admitto.Domain.Entities.TicketedEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("BaseUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("base_url");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset>("EndsAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_time");

                    b.Property<DateTimeOffset>("LastChangedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_changed_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("SigningKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("signing_key");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("slug");

                    b.Property<DateTimeOffset>("StartsAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_time");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("website");

                    b.HasKey("Id");

                    b.HasIndex("TeamId", "Slug")
                        .IsUnique();

                    b.ToTable("ticketed_events", (string)null);
                });

            modelBuilder.Entity("Amolenk.Admitto.Infrastructure.Messaging.MessageLog", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("HandlerType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("handler_type");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_id");

                    b.Property<string>("MessageType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("message_type");

                    b.Property<DateTimeOffset>("ProcessedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_at");

                    b.HasKey("Id");

                    b.ToTable("message_log", (string)null);
                });

            modelBuilder.Entity("Amolenk.Admitto.Domain.Entities.Attendee", b =>
                {
                    b.OwnsMany("Amolenk.Admitto.Domain.ValueObjects.AdditionalDetail", "AdditionalDetails", b1 =>
                        {
                            b1.Property<Guid>("AttendeeId")
                                .HasColumnType("uuid");

                            b1.Property<int>("__synthesizedOrdinal")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("AttendeeId", "__synthesizedOrdinal");

                            b1.ToTable("attendees");

                            b1.ToJson("additional_details");

                            b1.WithOwner()
                                .HasForeignKey("AttendeeId");
                        });

                    b.OwnsMany("Amolenk.Admitto.Domain.ValueObjects.TicketSelection", "Tickets", b1 =>
                        {
                            b1.Property<Guid>("AttendeeId")
                                .HasColumnType("uuid");

                            b1.Property<int>("__synthesizedOrdinal")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<int>("Quantity")
                                .HasColumnType("integer");

                            b1.Property<string>("TicketTypeSlug")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("AttendeeId", "__synthesizedOrdinal");

                            b1.ToTable("attendees");

                            b1.ToJson("tickets");

                            b1.WithOwner()
                                .HasForeignKey("AttendeeId");
                        });

                    b.Navigation("AdditionalDetails");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Amolenk.Admitto.Domain.Entities.BulkEmailWorkItem", b =>
                {
                    b.OwnsOne("Amolenk.Admitto.Domain.ValueObjects.BulkEmailWorkItemRepeat", "Repeat", b1 =>
                        {
                            b1.Property<Guid>("BulkEmailWorkItemId")
                                .HasColumnType("uuid");

                            b1.Property<DateTimeOffset>("WindowEnd")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<DateTimeOffset>("WindowStart")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("BulkEmailWorkItemId");

                            b1.ToTable("bulk_email_work_items");

                            b1.ToJson("repeat");

                            b1.WithOwner()
                                .HasForeignKey("BulkEmailWorkItemId");
                        });

                    b.Navigation("Repeat");
                });

            modelBuilder.Entity("Amolenk.Admitto.Domain.Entities.Contributor", b =>
                {
                    b.OwnsMany("Amolenk.Admitto.Domain.ValueObjects.AdditionalDetail", "AdditionalDetails", b1 =>
                        {
                            b1.Property<Guid>("ContributorId")
                                .HasColumnType("uuid");

                            b1.Property<int>("__synthesizedOrdinal")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("ContributorId", "__synthesizedOrdinal");

                            b1.ToTable("contributors");

                            b1.ToJson("additional_details");

                            b1.WithOwner()
                                .HasForeignKey("ContributorId");
                        });

                    b.Navigation("AdditionalDetails");
                });

            modelBuilder.Entity("Amolenk.Admitto.Domain.Entities.Team", b =>
                {
                    b.OwnsMany("Amolenk.Admitto.Domain.Entities.TeamMember", "Members", b1 =>
                        {
                            b1.Property<Guid>("TeamId")
                                .HasColumnType("uuid");

                            b1.Property<int>("__synthesizedOrdinal")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid");

                            b1.Property<int>("Role")
                                .HasColumnType("integer");

                            b1.HasKey("TeamId", "__synthesizedOrdinal");

                            b1.ToTable("teams");

                            b1.ToJson("members");

                            b1.WithOwner()
                                .HasForeignKey("TeamId");
                        });

                    b.Navigation("Members");
                });

            modelBuilder.Entity("Amolenk.Admitto.Domain.Entities.TicketedEvent", b =>
                {
                    b.OwnsMany("Amolenk.Admitto.Domain.Entities.TicketType", "TicketTypes", b1 =>
                        {
                            b1.Property<Guid>("TicketedEventId")
                                .HasColumnType("uuid");

                            b1.Property<int>("__synthesizedOrdinal")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid");

                            b1.Property<int>("MaxCapacity")
                                .HasColumnType("integer");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("SlotName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Slug")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("UsedCapacity")
                                .HasColumnType("integer");

                            b1.HasKey("TicketedEventId", "__synthesizedOrdinal");

                            b1.ToTable("ticketed_events");

                            b1.ToJson("ticket_types");

                            b1.WithOwner()
                                .HasForeignKey("TicketedEventId");
                        });

                    b.OwnsMany("Amolenk.Admitto.Domain.ValueObjects.AdditionalDetailSchema", "AdditionalDetailSchemas", b1 =>
                        {
                            b1.Property<Guid>("TicketedEventId")
                                .HasColumnType("uuid");

                            b1.Property<int>("__synthesizedOrdinal")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<bool>("IsRequired")
                                .HasColumnType("boolean");

                            b1.Property<int>("MaxLength")
                                .HasColumnType("integer");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("TicketedEventId", "__synthesizedOrdinal");

                            b1.ToTable("ticketed_events");

                            b1.ToJson("additional_detail_schemas");

                            b1.WithOwner()
                                .HasForeignKey("TicketedEventId");
                        });

                    b.OwnsOne("Amolenk.Admitto.Domain.ValueObjects.CancellationPolicy", "CancellationPolicy", b1 =>
                        {
                            b1.Property<Guid>("TicketedEventId")
                                .HasColumnType("uuid");

                            b1.Property<TimeSpan>("CutoffBeforeEvent")
                                .HasColumnType("interval");

                            b1.HasKey("TicketedEventId");

                            b1.ToTable("ticketed_events");

                            b1.ToJson("cancellation_policy");

                            b1.WithOwner()
                                .HasForeignKey("TicketedEventId");
                        });

                    b.OwnsOne("Amolenk.Admitto.Domain.ValueObjects.ReconfirmPolicy", "ReconfirmPolicy", b1 =>
                        {
                            b1.Property<Guid>("TicketedEventId")
                                .HasColumnType("uuid");

                            b1.Property<TimeSpan>("InitialDelayAfterRegistration")
                                .HasColumnType("interval");

                            b1.Property<TimeSpan>("ReminderInterval")
                                .HasColumnType("interval");

                            b1.Property<TimeSpan>("WindowEndBeforeEvent")
                                .HasColumnType("interval");

                            b1.Property<TimeSpan>("WindowStartBeforeEvent")
                                .HasColumnType("interval");

                            b1.HasKey("TicketedEventId");

                            b1.ToTable("ticketed_events");

                            b1.ToJson("reconfirm_policy");

                            b1.WithOwner()
                                .HasForeignKey("TicketedEventId");
                        });

                    b.OwnsOne("Amolenk.Admitto.Domain.ValueObjects.RegistrationPolicy", "RegistrationPolicy", b1 =>
                        {
                            b1.Property<Guid>("TicketedEventId")
                                .HasColumnType("uuid");

                            b1.Property<TimeSpan>("ClosesBeforeEvent")
                                .HasColumnType("interval");

                            b1.Property<string>("EmailDomainName")
                                .HasColumnType("text");

                            b1.Property<TimeSpan>("OpensBeforeEvent")
                                .HasColumnType("interval");

                            b1.HasKey("TicketedEventId");

                            b1.ToTable("ticketed_events");

                            b1.ToJson("registration_policy");

                            b1.WithOwner()
                                .HasForeignKey("TicketedEventId");
                        });

                    b.OwnsOne("Amolenk.Admitto.Domain.ValueObjects.ReminderPolicy", "ReminderPolicy", b1 =>
                        {
                            b1.Property<Guid>("TicketedEventId")
                                .HasColumnType("uuid");

                            b1.Property<TimeSpan>("LeadTime")
                                .HasColumnType("interval");

                            b1.HasKey("TicketedEventId");

                            b1.ToTable("ticketed_events");

                            b1.ToJson("reminder_policy");

                            b1.WithOwner()
                                .HasForeignKey("TicketedEventId");
                        });

                    b.Navigation("AdditionalDetailSchemas");

                    b.Navigation("CancellationPolicy")
                        .IsRequired();

                    b.Navigation("ReconfirmPolicy");

                    b.Navigation("RegistrationPolicy");

                    b.Navigation("ReminderPolicy");

                    b.Navigation("TicketTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
